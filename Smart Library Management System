 Basic Structure:
    SmartLibraryManagementSystem/
    ├── Main.java
    ├── Book.java
    ├── User.java
    └── Library.java

/* Book.java */
public class Book {
    private String id;
    private String title;
    private boolean isIssued;

    public Book(String id, String title) {
        this.id = id;
        this.title = title;
        this.isIssued = false;
    }

    public String getId() { return id; }
    public String getTitle() { return title; }
    public boolean isIssued() { return isIssued; }
    public void issue() { isIssued = true; }
    public void returnBook() { isIssued = false; }

    @Override
    public String toString() {
        return id + " - " + title + (isIssued ? " (Issued)" : " (Available)");
    }
}

/* User.java */
public class User {
    private String userId;
    private String name;

    public User(String userId, String name) {
        this.userId = userId;
        this.name = name;
    }

    public String getUserId() { return userId; }
    public String getName() { return name; }

    @Override
    public String toString() {
        return userId + " - " + name;
    }
}

/* Library.java */
import java.util.*;

public class Library {
    private Map<String, Book> books = new HashMap<>();
    private Map<String, User> users = new HashMap<>();
    private Map<String, String> issuedBooks = new HashMap<>();

    public void addBook(Book book) {
        books.put(book.getId(), book);
    }

    public void registerUser(User user) {
        users.put(user.getUserId(), user);
    }

    public void issueBook(String bookId, String userId) {
        if (!books.containsKey(bookId) || !users.containsKey(userId)) {
            System.out.println("Book/User not found.");
            return;
        }
        Book book = books.get(bookId);
        if (book.isIssued()) {
            System.out.println("Book is already issued.");
        } else {
            book.issue();
            issuedBooks.put(bookId, userId);
            System.out.println("Book issued successfully.");
        }
    }

    public void returnBook(String bookId) {
        if (issuedBooks.containsKey(bookId)) {
            books.get(bookId).returnBook();
            issuedBooks.remove(bookId);
            System.out.println("Book returned.");
        } else {
            System.out.println("Book was not issued.");
        }
    }

    public void showAllBooks() {
        books.values().forEach(System.out::println);
    }

    public void showAllUsers() {
        users.values().forEach(System.out::println);
    }
}

/* Main.java */
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Library library = new Library();
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n=== Smart Library Menu ===");
            System.out.println("1. Add Book");
            System.out.println("2. Register User");
            System.out.println("3. Issue Book");
            System.out.println("4. Return Book");
            System.out.println("5. View All Books");
            System.out.println("6. View All Users");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt(); sc.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter Book ID: ");
                    String bid = sc.nextLine();
                    System.out.print("Enter Title: ");
                    String title = sc.nextLine();
                    library.addBook(new Book(bid, title));
                    break;
                case 2:
                    System.out.print("Enter User ID: ");
                    String uid = sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    library.registerUser(new User(uid, name));
                    break;
                case 3:
                    System.out.print("Enter Book ID: ");
                    bid = sc.nextLine();
                    System.out.print("Enter User ID: ");
                    uid = sc.nextLine();
                    library.issueBook(bid, uid);
                    break;
                case 4:
                    System.out.print("Enter Book ID: ");
                    bid = sc.nextLine();
                    library.returnBook(bid);
                    break;
                case 5:
                    library.showAllBooks();
                    break;
                case 6:
                    library.showAllUsers();
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice.");
            }

        } while (choice != 0);

        sc.close();
    }
}
 
